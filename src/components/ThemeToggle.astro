---
import SunIcon from "@/icons/sun.astro"
import MoonIcon from "@/icons/moon.astro"
import { DARK_THEME, LIGHT_THEME } from "@/consts/themes"
---

<button
	id="themeToggle"
	class="inline-flex text-primary any-hover:scale-125 any-hover:opacity-70 motion-safe:transition"
>
	<SunIcon class="opacity-100 motion-safe:transition-transform dark:-rotate-90 dark:opacity-0" />
	<MoonIcon
		class="absolute rotate-90 opacity-0 motion-safe:transition-transform dark:rotate-0 dark:opacity-100"
	/>
	<span class="sr-only"></span>
</button>

<script is:inline define:vars={{ darkTheme: DARK_THEME, lightTheme: LIGHT_THEME }}>
	function handleToggleClick() {
		const element = document.documentElement
		element.classList.toggle(darkTheme)

		const isDark = element.classList.contains(darkTheme)
		localStorage.setItem("theme", isDark ? darkTheme : lightTheme)

		updateThemeMessage(isDark)
	}

	function updateThemeMessage(theme) {
		const translation = theme ? "oscuro" : "claro"
		const actualThemeMsg = `Alternar tema, el tema actual es ${translation}`
		const span = document.querySelector("span.sr-only")
		span.innerHTML = actualThemeMsg

		window.dispatchEvent(new Event("theme-changed"))
	}

	const handleThemePreferenceChange = (e) => {
		const isDark = document.documentElement.classList.contains("dark")
		const toggle = (e.matches && !isDark) || (!e.matches && isDark)
		if (toggle) handleToggleClick()
	}

	const darkModePreference = window.matchMedia("(prefers-color-scheme: dark)")
	darkModePreference.addEventListener("change", handleThemePreferenceChange)
	darkModePreference.addListener(handleThemePreferenceChange) // backward compatibility

	document.getElementById("themeToggle").addEventListener("click", handleToggleClick)
	updateThemeMessage(window.getThemePreference())
</script>
