---
import CalendarButton from "../components/CalendarButton.astro"
import MapMarkerIcon from "@/icons/map-marker.astro"
---

<section
	class="mx-auto mt-16 flex animate-fade-in flex-col place-items-center text-center text-primary animate-delay-[2s] motion-reduce:animate-delay-[0s] motion-reduce:animate-duration-[0s] md:mt-32"
>
	<div class="text-3xl font-semibold uppercase md:text-5xl">
		<time class="date"></time>
		<span aria-hidden="true" class="mx-1 hidden md:inline">·</span>
		<br aria-hidden="true" class="block md:hidden" />
		<time class="time"></time>
	</div>

	<h2 class="mt-6 flex max-w-sm flex-col text-lg font-medium uppercase lg:text-2xl">
		<span>Evento de Presentación</span>
		<a
			href="https://maps.app.goo.gl/RFzHUVDhRqdQaTAo8"
			target="_blank"
			rel="noopener"
			style="display: -webkit-box;"
			aria-label="ubicación del teatro en google maps, se abrirá en una nueva pestaña"
		>
			<MapMarkerIcon class="mr-1 max-md:mt-1 md:mt-0.5 md:size-6" /> Teatro Victoria (Barcelona)
		</a>
	</h2>

	<div class="scroll-horizontal mt-6 flex flex-col items-center gap-9 md:flex-row">
		<a
			href="https://www.teatrevictoria.com/es/cartelera/c/190_la-velada-del-ano-4.html"
			target="_blank"
			rel="noopener noreferrer"
			aria-label="entradas agotadas, se abrirá en una nueva pestaña"
		>
			<span> Entradas agotadas </span>
		</a>

		<CalendarButton />
	</div>
</section>

<style is:global>
	.scroll-horizontal > a,
	.scroll-horizontal > #add-to-calendar {
		background: transparent;
		border: none;
		padding: 10px 20px;
		display: inline-block;
		font-size: 20px;
		font-weight: 600;
		width: 20rem;
		text-transform: uppercase;
		cursor: pointer;
		transform: skew(-21deg);
		color: var(--color-primary);
		border: 2px solid var(--color-primary);
	}

	.scroll-horizontal > a > span,
	.scroll-horizontal > #add-to-calendar > span {
		display: inline-block;
		transform: skew(21deg);
	}

	.scroll-horizontal > a::before,
	.scroll-horizontal > #add-to-calendar::before {
		content: "";
		position: absolute;
		top: 0;
		bottom: 0;
		right: 100%;
		left: 0;
		background: var(--color-primary);
		opacity: 0;
		z-index: -1;
	}

	.scroll-horizontal > a:hover,
	.scroll-horizontal > #add-to-calendar:hover {
		color: var(--color-secondary);
		scale: 1.1;
		transform: skew(-21deg);
	}

	.scroll-horizontal > a:hover::before,
	.scroll-horizontal > #add-to-calendar:hover::before {
		left: 0;
		right: 0;
		opacity: 1;
	}

	@media (prefers-reduced-motion: no-preference) {
		.scroll-horizontal > a,
		.scroll-horizontal > #add-to-calendar {
			transition: scale 150ms ease-in-out;
		}

		.scroll-horizontal > a::before,
		.scroll-horizontal > #add-to-calendar::before {
			transition: all 0.5s;
		}
	}
</style>

<script>
	import { EVENT_TIMESTAMP, timeZoneAbbreviations } from "@/consts/event-date"

	function getUserTimeZone(): string {
		return Intl.DateTimeFormat().resolvedOptions().timeZone
	}

	// Formatea la fecha del evento considerando la zona horaria del usuario
	function formatEventDate(timestamp: number, timeZone: string): string {
		const options: Intl.DateTimeFormatOptions = {
			day: "numeric",
			month: "long",
			timeZone,
		}
		return new Intl.DateTimeFormat("es-ES", options).format(new Date(timestamp))
	}

	// Formatea la hora del evento con el nombre de la zona horaria, ajustándose al formato de 24 horas
	function formatEventTimeWithTimeZoneName(timestamp: number, timeZone: string): string {
		const formattedTime = new Intl.DateTimeFormat("es-ES", {
			hour: "numeric",
			minute: "numeric",
			hour12: false,
			timeZone,
		}).format(new Date(timestamp))

		const timeZoneName =
			timeZoneAbbreviations[timeZone] ||
			new Intl.DateTimeFormat("es-ES", {
				timeZone,
				timeZoneName: "short",
			})
				.formatToParts(new Date(timestamp))
				.find((part) => part.type === "timeZoneName")?.value

		return `${formattedTime} ${timeZoneName}`
	}

	// Genera un datetime válido para el atributo 'datetime' del elemento <time>, respetando la zona horaria
	function formatValidDatetime(timestamp: number, timeZone: string): string {
		const options: Intl.DateTimeFormatOptions = {
			year: "numeric",
			month: "2-digit",
			day: "2-digit",
			hour: "2-digit",
			minute: "2-digit",
			second: "2-digit",
			timeZone,
			hour12: false,
		}
		return new Intl.DateTimeFormat("en-CA", options).format(new Date(timestamp))
	}

	function updateUI(dateString: string, timeString: string, validDatetime: string) {
		const $dateSpan = document.querySelector(".date")
		const $timeSpan = document.querySelector(".time")

		if ($dateSpan != null && $timeSpan != null) {
			$dateSpan.innerHTML = dateString
			$dateSpan.setAttribute("datetime", validDatetime)
			$timeSpan.innerHTML = timeString
			$timeSpan.setAttribute("datetime", validDatetime)
		}
	}

	function main() {
		const USER_TZ = getUserTimeZone()
		const formattedDate = formatEventDate(EVENT_TIMESTAMP, USER_TZ)
		const formattedTime = formatEventTimeWithTimeZoneName(EVENT_TIMESTAMP, USER_TZ)
		const validDatetime = formatValidDatetime(EVENT_TIMESTAMP, USER_TZ)

		updateUI(formattedDate, formattedTime, validDatetime)
	}

	document.addEventListener("DOMContentLoaded", main)

	// Verifica si el evento ya ha pasado
	const eventHasPassed = EVENT_TIMESTAMP < Date.now()
	if (eventHasPassed) {
		const addToCalendarBtn = document.getElementById("add-to-calendar")
		if (addToCalendarBtn) {
			addToCalendarBtn.remove()
		}
	}
</script>
